// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from layer_gps.djinni

package io.openmobilemaps.mapscore.shared.gps

import java.util.concurrent.atomic.AtomicBoolean

abstract class GpsLayerCallbackInterface {

    abstract fun pointImage(): io.openmobilemaps.mapscore.shared.graphics.objects.TextureHolderInterface

    abstract fun headingImage(): io.openmobilemaps.mapscore.shared.graphics.objects.TextureHolderInterface

    abstract fun accuracyColor(): io.openmobilemaps.mapscore.shared.graphics.common.Color

    private class CppProxy : GpsLayerCallbackInterface {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
        }

        private external fun nativeDestroy(nativeRef: Long)
        fun _djinni_private_destroy() {
            val destroyed = this.destroyed.getAndSet(true)
            if (!destroyed) nativeDestroy(this.nativeRef)
        }
        protected fun finalize() {
            _djinni_private_destroy()
        }

        override fun pointImage(): io.openmobilemaps.mapscore.shared.graphics.objects.TextureHolderInterface {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_pointImage(this.nativeRef)
        }
        private external fun native_pointImage(_nativeRef: Long): io.openmobilemaps.mapscore.shared.graphics.objects.TextureHolderInterface

        override fun headingImage(): io.openmobilemaps.mapscore.shared.graphics.objects.TextureHolderInterface {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_headingImage(this.nativeRef)
        }
        private external fun native_headingImage(_nativeRef: Long): io.openmobilemaps.mapscore.shared.graphics.objects.TextureHolderInterface

        override fun accuracyColor(): io.openmobilemaps.mapscore.shared.graphics.common.Color {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_accuracyColor(this.nativeRef)
        }
        private external fun native_accuracyColor(_nativeRef: Long): io.openmobilemaps.mapscore.shared.graphics.common.Color
    }
}
