// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from layer_gps.djinni

#import "MCGpsStyleInfoInterface+Private.h"
#import "MCGpsStyleInfoInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "MCColor+Private.h"
#import "MCTextureHolderInterface+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCGpsStyleInfoInterface ()

- (id)initWithCpp:(const std::shared_ptr<::GpsStyleInfoInterface>&)cppRef;

@end

@implementation MCGpsStyleInfoInterface {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::GpsStyleInfoInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::GpsStyleInfoInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable MCGpsStyleInfoInterface *)create:(nullable id<MCTextureHolderInterface>)pointTexture
                              headingTexture:(nullable id<MCTextureHolderInterface>)headingTexture
                               courseTexture:(nullable id<MCTextureHolderInterface>)courseTexture
                               accuracyColor:(nonnull MCColor *)accuracyColor {
    try {
        auto objcpp_result_ = ::GpsStyleInfoInterface::create(::djinni::Optional<std::optional, ::djinni_generated::TextureHolderInterface>::toCpp(pointTexture),
                                                              ::djinni::Optional<std::optional, ::djinni_generated::TextureHolderInterface>::toCpp(headingTexture),
                                                              ::djinni::Optional<std::optional, ::djinni_generated::TextureHolderInterface>::toCpp(courseTexture),
                                                              ::djinni_generated::Color::toCpp(accuracyColor));
        return ::djinni_generated::GpsStyleInfoInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<MCTextureHolderInterface>)getPointTexture {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getPointTexture();
        return ::djinni_generated::TextureHolderInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<MCTextureHolderInterface>)getHeadingTexture {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getHeadingTexture();
        return ::djinni::Optional<std::optional, ::djinni_generated::TextureHolderInterface>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<MCTextureHolderInterface>)getCourseTexture {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getCourseTexture();
        return ::djinni::Optional<std::optional, ::djinni_generated::TextureHolderInterface>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull MCColor *)getAccuracyColor {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getAccuracyColor();
        return ::djinni_generated::Color::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto GpsStyleInfoInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto GpsStyleInfoInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<MCGpsStyleInfoInterface>(cpp);
}

} // namespace djinni_generated

@end
